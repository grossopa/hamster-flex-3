<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:flex="http://www.springframework.org/schema/flex"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/flex 
            http://www.springframework.org/schema/flex/spring-flex-1.0.xsd">

	<context:property-placeholder location="classpath:init.properties" />

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
		p:username="${jdbc.username}" p:password="${jdbc.password}" />

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<property name="annotatedClasses">
			<list>
				<value>org.hamster.pm.main.pojo.DUser</value>
				<value>org.hamster.pm.weibo.pojo.DWeibo</value>
				<value>org.hamster.pm.weibo.pojo.DWeiboUser</value>
       		</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQL5Dialect
				</prop>
				<prop key="hibernate.show_sql">
					true
				</prop>
				<prop key="hibernate.hbm2ddl.auto">
					${hibernate.hbm2ddl.auto}
				</prop>
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean
						class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	
	<context:annotation-config />
	<context:component-scan base-package="org.hamster.pm" />
	<tx:annotation-driven transaction-manager="transactionManager" />

	<context:mbean-export />
	<bean name="petclinic:type=HibernateStatistics" 
		class="org.hibernate.jmx.StatisticsService"
		autowire="byName" />

	<bean id="dao"
		class="org.hamster.pm.common.dao.impl.BaseDAOHibernate"
		autowire="byName">
	</bean>
	
	<!-- <bean id="sessionInterceptor" class="org.hamster.pm.main.web.rest.interceptor.SessionInterceptor" />
		<bean id="autoPorxyFactoryBean"  
        	class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">  
        <property name="interceptorNames">  
            <list>  
                <value>sessionInterceptor</value>  
            </list>  
        </property>  
        <property name="beanNames" >  
        	<list>  
            	<value>*Controller</value>  
            </list>  
        </property>  
    </bean>
	
	<bean id="editBusinessEntryHandlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="interceptors">
			<list>
				<ref bean="sessionInterceptor"/>
			</list>
		</property>
		<property name="urlMap">
			<map>
				<entry key="/main/logout"><ref local="sessionInterceptor"/></entry>	
			</map>
		</property>
	</bean> -->
 	
	<!--  <bean name="memcachedClientBuilder" 
		class="com.hp.hpl.articleclipper.web.initialization.ACXMemcachedClientBuilder">
		<property name="connectionPoolSize" value="2"/>
		<property name="commandFactory">
			<bean class="net.rubyeye.xmemcached.command.TextCommandFactory" />
		</property>
		<property name="sessionLocator">
			<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"/>
		</property>
		<property name="transcoder">
			<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
		</property>
	</bean>
	<bean name="memcachedClient" factory-bean="memcachedClientBuilder"
			factory-method="build" destroy-method="shutdown"/>-->
			
	<!-- blazeDS integration -->
	<flex:message-broker services-config-path="classpath*:flex-services-config.xml">
		<flex:mapping pattern="/messagebroker/*" />
		<flex:config-processor ref="appConfigProcessor" />
		<flex:exception-translator ref="appExceptionTranslator"/>
		<flex:message-interceptor ref="appMessageInterceptor"/>
	</flex:message-broker>
	
	<!-- services 
	<flex:remoting-destination ref="userService" />-->
	
	<bean id="_messageBroker" class="org.springframework.flex.core.MessageBrokerFactoryBean" >
		<property name="servicesConfigPath" value="classpath*:flex-services-config.xml" />
	</bean>
	
	<!-- Maps request paths at /* to the BlazeDS MessageBroker -->
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<value>
				/*=_messageBroker
			</value>
		</property>
	</bean>
	
	<!-- Dispatches requests mapped to a MessageBroker -->
	<bean class="org.springframework.flex.servlet.MessageBrokerHandlerAdapter"/>
	
	<!-- Advanced MessageBroker Customization -->
	<bean id="appConfigProcessor" class="org.hamster.pm.flex.config.AppMessageBrokerConfigProcessor" />
	
	<!-- Exception Translator -->
	<bean id="appExceptionTranslator" class="org.hamster.pm.flex.exception.AppExceptionTranslator"/>
	
	<!-- Message Interceptor -->
	<!-- Custom message interceptors may be used to apply special processing logic to 
		 incoming and outgoing AMF messages in their de-serialized Java form. 
		 For example, an interceptor can be used to inspect the contents of the incoming message, 
		 or to add extra information to the outgoing message.  -->
	<bean id="appMessageInterceptor" class="org.hamster.pm.flex.interceptor.AppMessageInterceptor"/>
	
	
</beans>
