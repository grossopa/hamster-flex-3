<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
		   xmlns:imageCropper="org.hamster.imageCropper.*" layout="vertical"
		   removedFromStage="module1_removedFromStageHandler(event)"
		   creationComplete="module1_creationCompleteHandler(event)">
	<mx:Metadata>
		[ResourceBundle("imageCropper")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import org.hamster.imageCropper.HsImageCropperEvent;
			import org.hamster.showcase.common.facade.AppFacade;
			import org.hamster.showcase.common.util.CommonUtil;
			import org.hamster.showcase.imageCropper.mediator.ImageCropperModuleMediator;
			import org.hamster.showcase.imageCropper.vo.CropImageVO;
			import org.hamster.showcase.imageCropper.vo.proxy.CropImageVOProxy;
			import org.puremvc.as3.interfaces.IFacade;
			
			[Bindable] public var cropImageSourceList:Array;
			
			protected function module1_creationCompleteHandler(event:FlexEvent):void
			{
				var facade:IFacade = CommonUtil.facade;
				facade.registerMediator(new ImageCropperModuleMediator(this));
				facade.registerProxy(new CropImageVOProxy());
				facade.sendNotification(AppFacade.LOAD_CROPIMAGE);
			}
			
			protected function module1_removedFromStageHandler(event:Event):void
			{
				var facade:IFacade = CommonUtil.facade;
				facade.removeMediator(ImageCropperModuleMediator.NAME + this.toString());
			}


			protected function cropButton_clickHandler(event:MouseEvent):void
			{
				Alert.show(imageCropper.cropArea.toString());
			}


			protected function imageCropper_mUpHandler(event:HsImageCropperEvent):void
			{
				CommonUtil.traceEvent(event, event.toString());
			}


			protected function imageCropper_mDownHandler(event:HsImageCropperEvent):void
			{
				CommonUtil.traceEvent(event, event.toString());
			}


			protected function imageCropper_sourceChangeHandler(event:HsImageCropperEvent):void
			{
				CommonUtil.traceEvent(event, event.toString());
			}


			protected function imageCropper_selectionChangeHandler(event:HsImageCropperEvent):void
			{
				//CommonUtil.traceEvent(event, event.toString());    
			}
 
		]]>
	</mx:Script>
	<mx:HBox width="100%" height="100%" horizontalGap="5">
		<mx:VBox height="100%" 
				 paddingLeft="10" paddingRight="10" paddingTop="10">
			<mx:Button id="cropButton" click="cropButton_clickHandler(event)" width="100%"
				label="{resourceManager.getString('imageCropper', 'imageCropper.alertSelectedArea')}"/>
			<mx:CheckBox id="aspectRatioCheckBox" 
				label="{resourceManager.getString('imageCropper', 'imageCropper.aspectRatioCheckBox')}"/>
			<mx:FormItem label="{resourceManager.getString('imageCropper', 'imageCropper.minSelectionW')}">
				<mx:NumericStepper id="minSelWStepper" stepSize="5" minimum="20" maximum="100" />
			</mx:FormItem>
			<mx:FormItem label="{resourceManager.getString('imageCropper', 'imageCropper.minSelectionH')}">
				<mx:NumericStepper id="minSelHStepper" stepSize="5" minimum="20" maximum="100" />
			</mx:FormItem>
		</mx:VBox>
		<imageCropper:HsImageCropper id="imageCropper" width="100%" height="100%" backgroundColor="black"
									 source="{cropImageHList.selectedItem.location}"
									 maintainAspectRatio="{aspectRatioCheckBox.selected}"
									 minSelectionW="{minSelWStepper.value}"
									 minSelectionH="{minSelHStepper.value}"
									 mUp="imageCropper_mUpHandler(event)"
									 mDown="imageCropper_mDownHandler(event)"
									 sourceChange="imageCropper_sourceChangeHandler(event)"/>
	</mx:HBox>
	<mx:HorizontalList id="cropImageHList" dataProvider="{cropImageSourceList}" 
					   height="70" width="100%" selectedIndex="0"
					   labelField="location" rowHeight="68" columnWidth="90">
		<mx:itemRenderer>
			<mx:Component>
				<mx:Image verticalAlign="middle" horizontalAlign="center" />
			</mx:Component>
		</mx:itemRenderer>
	</mx:HorizontalList>
</mx:Module>
